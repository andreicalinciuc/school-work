#include <bits/stdc++.h>

using namespace std;

string address;
list <string> cache;
map <string, list <string> ::iterator> chart;

int n, i, cache_size;

void AddInCache (string address)
{
    if (cache.size()>=cache_size)
    {
        chart.erase (cache.front());
        cache.pop_front();
    }
    cache.push_back(address);
    list <string> ::iterator it = cache.end();
    --it;
    chart[address] = it;
}

void RemoveFromCache (string address)
{
    map <string, list<string> ::iterator> ::iterator it = chart.find(address);
    chart.erase(it->first);
    cache.erase(it->second);
}

bool IsInCache (string address)
{
    map <string, list<string> ::iterator> ::iterator it = chart.find(address);
    if (it==chart.end())
    {
        AddInCache (address);
        return 0;
    }
    else
    {
        RemoveFromCache (address);
        AddInCache (address);
        return 1;
    }
}

int main()
{
    //freopen ("date.in", "r", stdin);
    //freopen ("date.out", "w", stdout);
    cin >> n >> cache_size;
    for (i=1; i<=n; i++)
    {
        cin >> address;
        if (IsInCache(address))
        {
            cout << "Cache\n";
        }
        else cout << "Internet\n";
    }
}
